import OrderPersistence from "../persistence/OrderPersistence.js";
import ProductPersistence from "../persistence/ProductPersistence.js";
import IllegalArgumentError from "./IllegalArgumentError.js";

const EMPTY_ARGUMENT_ERR = "Body contains an empty argument!";
const INVALID_EXPIRY_DATE_ERR = "Expiry date is in the past!";
const INVALID_QUANTITY_ERR = "Quantity cannot be less than 0!";
const INVALID_DELETE_ACTIVE_ERR = "Product cannot be deleted if active";
const INVALID_DELETE_WITH_ASSOCIATED_ORDERS_ERR = "Cannot delete product with associated orders";

class ProductService {
    #productPersistence;
    #orderPersistence;
    constructor() {
        this.#productPersistence = new ProductPersistence();
        this.#orderPersistence = new OrderPersistence();
    }

    async createProduct(product) {
        this.#assertNoEmptyArgs(product);
        this.#assertValidExpiryDate(product.expiryDate);
        this.#assertValidQuantity(product.quantity);
        return await this.#productPersistence.create(
            this.#buildProductObject(product)
        );
    }

    async getProductById(productId) {
        return await this.#productPersistence.getById(productId);
    }

    async getAllProducts() {
        return await this.#productPersistence.getAll();
    }

    async updateProduct(productId, updatedProduct) {
        this.#assertNoEmptyArgs(updatedProduct);
        this.#assertValidExpiryDate(updatedProduct.expiryDate);
        this.#assertValidQuantity(updatedProduct.quantity);
        return await this.#productPersistence.update(productId, updatedProduct);
    }

    async deleteProduct(productId) {
        this.#assertProductIsNotActive(productId);
        this.#assertNoAssociatedOrders(productId);
        await this.#productPersistence.delete(productId);
    }

    /**
     * @param {Product} product
     * Omits all the default values that must be
     * generated by the server: id, timestampCreated
     * @returns {JSON Object}
     */
    #buildProductObject(product) {
        return {
            serialNumber: product.serialNumber,
            name: product.name,
            isActive: product.isActive,
            mahName: product.mahName,
            quantity: product.quantity,
            expiryDate: product.expiryDate,
        };
    }

    /**
     * @param {Product} product
     * Checks for the product fields that
     * should always be passed and have no default values
     * @throws {IllegalArgumentError}
     */
    #assertNoEmptyArgs(product) {
        const { serialNumber, name, mahName, quantity, expiryDate } = product;
        const args = [serialNumber, name, mahName, quantity, expiryDate];
        if (args.some((value) => !value)) {
            throw new IllegalArgumentError(EMPTY_ARGUMENT_ERR);
        }
    }

    #assertValidExpiryDate(expiryDate) {
        if (expiryDate < Date.now() / 1000) {
            throw new IllegalArgumentError(INVALID_EXPIRY_DATE_ERR);
        }
    }

    #assertValidQuantity(quantity) {
        if (quantity < 0) {
            throw new IllegalArgumentError(INVALID_QUANTITY_ERR);
        }
    }
    

    #assertProductIsNotActive(productId) {
        const product = this.#productPersistence.getById(productId);
        if (!product.isActive) {
            throw new IllegalArgumentError(INVALID_DELETE_ACTIVE_ERR);
        }
    }

    #assertNoAssociatedOrders(productId) {
        const orders = this.#orderPersistence.getByProductId(productId);
        if(!this.#orderPersistence.getByProductId(productId)) {
            throw new IllegalArgumentError(INVALID_DELETE_WITH_ASSOCIATED_ORDERS_ERR);
        }
    }
}

export default ProductService;
